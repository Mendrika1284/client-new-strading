"use client";

import {
  Package,
  PackageStatus,
  ShippingMode,
} from "@/app/modules/package/domain/entities/package.entity";
import { useCallback, useEffect, useMemo, useState } from "react";
import DashboardLayout from "../components/DashboardLayout";

export default function ShippingModePage() {
  const [packages, setPackages] = useState<Package[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedPackage, setSelectedPackage] = useState<Package | null>(null);
  const [newShippingMode, setNewShippingMode] = useState<ShippingMode>(
    ShippingMode.SEA
  );
  const [showModal, setShowModal] = useState(false);

  // Mock data - Colis éligibles au changement (pas encore récupérés)
  const mockPackages: Package[] = useMemo(
    () => [
      {
        id: "pkg1",
        trackingNumber: "TR123456789",
        customName: "Électronique",
        status: PackageStatus.RECEIVED_IN_CHINA,
        weight: 2.5,
        dimensions: { length: 30, width: 20, height: 15 },
        description: "Smartphone et accessoires",
        value: 800,
        currency: "USD",
        shippingMode: ShippingMode.SEA,
        userId: "user1",
        createdAt: new Date("2024-03-15"),
        updatedAt: new Date("2024-03-15"),
        history: [],
      },
      {
        id: "pkg2",
        trackingNumber: "TR987654321",
        customName: "Vêtements",
        status: PackageStatus.IN_TRANSIT,
        weight: 1.8,
        dimensions: { length: 25, width: 18, height: 10 },
        description: "Vêtements d'hiver",
        value: 300,
        currency: "USD",
        shippingMode: ShippingMode.AIR,
        userId: "user1",
        createdAt: new Date("2024-03-14"),
        updatedAt: new Date("2024-03-14"),
        history: [],
      },
      {
        id: "pkg3",
        trackingNumber: "TR555666777",
        customName: "Livres",
        status: PackageStatus.ARRIVED_IN_MADAGASCAR,
        weight: 3.2,
        dimensions: { length: 35, width: 25, height: 20 },
        description: "Collection de livres",
        value: 150,
        currency: "USD",
        shippingMode: ShippingMode.SEA,
        userId: "user1",
        createdAt: new Date("2024-03-10"),
        updatedAt: new Date("2024-03-12"),
        history: [],
      },
    ],
    []
  );

  // Filtrer les colis éligibles (pas encore récupérés)
  const eligiblePackages = useMemo(() => {
    return mockPackages.filter((pkg) => pkg.status !== PackageStatus.RETRIEVED);
  }, [mockPackages]);

  const loadPackages = useCallback(async () => {
    try {
      setLoading(true);
      await new Promise((resolve) => setTimeout(resolve, 1000));
      setPackages(eligiblePackages);
    } catch (error) {
      console.error("Erreur lors du chargement des colis:", error);
    } finally {
      setLoading(false);
    }
  }, [eligiblePackages]);

  useEffect(() => {
    loadPackages();
  }, [loadPackages]);

  const getStatusColor = (status: PackageStatus) => {
    switch (status) {
      case PackageStatus.RECEIVED_IN_CHINA:
        return "bg-blue-100 text-blue-800";
      case PackageStatus.IN_TRANSIT:
        return "bg-yellow-100 text-yellow-800";
      case PackageStatus.ARRIVED_IN_MADAGASCAR:
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusText = (status: PackageStatus) => {
    switch (status) {
      case PackageStatus.RECEIVED_IN_CHINA:
        return "Réception en Chine";
      case PackageStatus.IN_TRANSIT:
        return "En transit";
      case PackageStatus.ARRIVED_IN_MADAGASCAR:
        return "Arrivée à Madagascar";
      default:
        return status;
    }
  };

  const getShippingModeText = (mode: ShippingMode) => {
    switch (mode) {
      case ShippingMode.SEA:
        return "Maritime";
      case ShippingMode.AIR:
        return "Aérien";
      case ShippingMode.EXPRESS:
        return "Express";
      default:
        return mode;
    }
  };

  const getShippingModeIcon = (mode: ShippingMode) => {
    switch (mode) {
      case ShippingMode.SEA:
        return "🚢";
      case ShippingMode.AIR:
        return "✈️";
      case ShippingMode.EXPRESS:
        return "🚀";
      default:
        return "📦";
    }
  };

  const canChangeShippingMode = (packageItem: Package) => {
    // On peut changer le mode d'envoi seulement si le colis n'est pas encore arrivé
    return packageItem.status === PackageStatus.RECEIVED_IN_CHINA;
  };

  const openChangeModal = (packageItem: Package) => {
    setSelectedPackage(packageItem);
    setNewShippingMode(packageItem.shippingMode);
    setShowModal(true);
  };

  const closeModal = () => {
    setSelectedPackage(null);
    setShowModal(false);
  };

  const handleSubmitChange = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!selectedPackage) return;

    try {
      setLoading(true);

      // Simuler l'API call
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Mettre à jour le package dans la liste
      const updatedPackages = packages.map((pkg) =>
        pkg.id === selectedPackage.id
          ? {
              ...pkg,
              shippingMode: newShippingMode,
              updatedAt: new Date(),
              status: PackageStatus.SHIPPING_MODE_CHANGED,
            }
          : pkg
      );

      setPackages(updatedPackages);
      closeModal();

      alert(
        `Mode d'envoi changé avec succès pour le colis ${selectedPackage.trackingNumber}`
      );
    } catch (error) {
      console.error("Erreur lors du changement de mode d'envoi:", error);
      alert("Erreur lors du changement de mode d'envoi");
    } finally {
      setLoading(false);
    }
  };

  const getShippingCostEstimate = (
    currentMode: ShippingMode,
    newMode: ShippingMode,
    weight: number
  ) => {
    const baseCosts = {
      [ShippingMode.SEA]: 5000,
      [ShippingMode.AIR]: 15000,
      [ShippingMode.EXPRESS]: 25000,
    };

    const currentCost = baseCosts[currentMode] * weight;
    const newCost = baseCosts[newMode] * weight;
    const difference = newCost - currentCost;

    return { currentCost, newCost, difference };
  };

  return (
    <DashboardLayout 
      title="Changement de Mode d'Envoi" 
      description="Modifiez le mode d'envoi de vos colis non encore expédiés"
    >
      <div className="bg-white rounded-lg shadow-sm border">
        {loading ? (
          <div className="p-8 text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-2 text-gray-600">Chargement des colis...</p>
            </div>
          ) : packages.length === 0 ? (
            <div className="p-8 text-center">
              <div className="text-6xl mb-4">📦</div>
              <p className="text-gray-500">
                Aucun colis éligible pour un changement de mode d&apos;envoi
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Colis
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Statut
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Mode actuel
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Poids
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {packages.map((packageItem) => (
                    <tr key={packageItem.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {packageItem.customName ||
                              packageItem.trackingNumber}
                          </div>
                          <div className="text-sm text-gray-500">
                            {packageItem.trackingNumber}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(
                            packageItem.status
                          )}`}
                        >
                          {getStatusText(packageItem.status)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <span className="text-lg mr-2">
                            {getShippingModeIcon(packageItem.shippingMode)}
                          </span>
                          <span className="text-sm text-gray-900">
                            {getShippingModeText(packageItem.shippingMode)}
                          </span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {packageItem.weight} kg
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        {canChangeShippingMode(packageItem) ? (
                          <button
                            onClick={() => openChangeModal(packageItem)}
                            className="text-blue-600 hover:text-blue-900"
                          >
                            Changer le mode
                          </button>
                        ) : (
                          <span className="text-gray-400">Non modifiable</span>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Modal de changement */}
        {showModal && selectedPackage && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
              <div className="mt-3">
                <h3 className="text-lg font-medium text-gray-900 mb-4">
                  Changer le mode d&apos;envoi
                </h3>

                <div className="mb-4 p-3 bg-gray-50 rounded">
                  <p className="text-sm text-gray-600">
                    Colis: {selectedPackage.customName}
                  </p>
                  <p className="text-sm text-gray-600">
                    Tracking: {selectedPackage.trackingNumber}
                  </p>
                  <p className="text-sm text-gray-600">
                    Mode actuel:{" "}
                    {getShippingModeText(selectedPackage.shippingMode)}
                  </p>
                </div>

                <form onSubmit={handleSubmitChange}>
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Nouveau mode d&apos;envoi
                    </label>
                    <select
                      value={newShippingMode}
                      onChange={(e) =>
                        setNewShippingMode(e.target.value as ShippingMode)
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value={ShippingMode.SEA}>
                        🚢 Maritime (économique)
                      </option>
                      <option value={ShippingMode.AIR}>
                        ✈️ Aérien (standard)
                      </option>
                      <option value={ShippingMode.EXPRESS}>
                        🚀 Express (rapide)
                      </option>
                    </select>
                  </div>

                  {newShippingMode !== selectedPackage.shippingMode && (
                    <div className="mb-4 p-3 bg-blue-50 rounded">
                      {(() => {
                        const costs = getShippingCostEstimate(
                          selectedPackage.shippingMode,
                          newShippingMode,
                          selectedPackage.weight || 1
                        );
                        return (
                          <div className="text-sm">
                            <p className="text-gray-600">
                              Estimation des coûts:
                            </p>
                            <p className="text-gray-600">
                              Coût actuel: {costs.currentCost.toLocaleString()}{" "}
                              MGA
                            </p>
                            <p className="text-gray-600">
                              Nouveau coût: {costs.newCost.toLocaleString()} MGA
                            </p>
                            <p
                              className={`font-medium ${
                                costs.difference >= 0
                                  ? "text-red-600"
                                  : "text-green-600"
                              }`}
                            >
                              Différence: {costs.difference >= 0 ? "+" : ""}
                              {costs.difference.toLocaleString()} MGA
                            </p>
                          </div>
                        );
                      })()}
                    </div>
                  )}

                  <div className="flex gap-3">
                    <button
                      type="submit"
                      disabled={
                        loading ||
                        newShippingMode === selectedPackage.shippingMode
                      }
                      className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
                    >
                      {loading ? "Modification..." : "Confirmer"}
                    </button>
                    <button
                      type="button"
                      onClick={closeModal}
                      className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500"
                    >
                      Annuler
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}
      </div>
    </DashboardLayout>
  );
}
